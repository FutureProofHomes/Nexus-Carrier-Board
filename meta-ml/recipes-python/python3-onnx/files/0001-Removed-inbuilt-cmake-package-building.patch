From 8b6af34e20a6919618448b63e00569dd79ae479c Mon Sep 17 00:00:00 2001
From: Illia Vysochyn <ivysochyn@internships.antmicro.com>
Date: Tue, 5 Apr 2022 16:00:48 +0200
Subject: [PATCH] Removed-inbuilt-cmake-package-building

---
 setup.py | 195 +++++++++++++++++++++++++++----------------------------
 1 file changed, 97 insertions(+), 98 deletions(-)

diff --git a/setup.py b/setup.py
index 6c434347..946dd552 100644
--- a/setup.py
+++ b/setup.py
@@ -28,8 +28,8 @@ PACKAGE_NAME = 'onnx'
 
 WINDOWS = (os.name == 'nt')
 
-CMAKE = find_executable('cmake3') or find_executable('cmake')
-MAKE = find_executable('make')
+# CMAKE = find_executable('cmake3') or find_executable('cmake')
+# MAKE = find_executable('make')
 
 install_requires = []
 setup_requires = []
@@ -78,7 +78,7 @@ with open(os.path.join(TOP_DIR, 'VERSION_NUMBER')) as version_file:
 # Pre Check
 ################################################################################
 
-assert CMAKE, 'Could not find "cmake" executable!'
+# assert CMAKE, 'Could not find "cmake" executable!'
 
 ################################################################################
 # Utilities
@@ -124,103 +124,103 @@ class create_version(ONNXCommand):
             '''.format(**dict(VersionInfo._asdict()))))
 
 
-class cmake_build(setuptools.Command):
-    """
-    Compiles everything when `python setup.py build` is run using cmake.
-
-    Custom args can be passed to cmake by specifying the `CMAKE_ARGS`
-    environment variable.
-
-    The number of CPUs used by `make` can be specified by passing `-j<ncpus>`
-    to `setup.py build`.  By default all CPUs are used.
-    """
-    user_options = [
-        (str('jobs='), str('j'), str('Specifies the number of jobs to use with make'))
-    ]
-
-    built = False
-
-    def initialize_options(self):
-        self.jobs = None
-
-    def finalize_options(self):
-        self.set_undefined_options('build', ('parallel', 'jobs'))
-        if self.jobs is None and os.getenv("MAX_JOBS") is not None:
-            self.jobs = os.getenv("MAX_JOBS")
-        self.jobs = multiprocessing.cpu_count() if self.jobs is None else int(self.jobs)
-
-    def run(self):
-        if cmake_build.built:
-            return
-        cmake_build.built = True
-        if not os.path.exists(CMAKE_BUILD_DIR):
-            os.makedirs(CMAKE_BUILD_DIR)
-
-        with cd(CMAKE_BUILD_DIR):
-            build_type = 'Release'
-            # configure
-            cmake_args = [
-                CMAKE,
-                '-DPYTHON_INCLUDE_DIR={}'.format(sysconfig.get_python_inc()),
-                '-DPYTHON_EXECUTABLE={}'.format(sys.executable),
-                '-DBUILD_ONNX_PYTHON=ON',
-                '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',
-                '-DONNX_NAMESPACE={}'.format(ONNX_NAMESPACE),
-                '-DPY_EXT_SUFFIX={}'.format(sysconfig.get_config_var('EXT_SUFFIX') or ''),
-            ]
-            if COVERAGE:
-                cmake_args.append('-DONNX_COVERAGE=ON')
-            if COVERAGE or DEBUG:
-                # in order to get accurate coverage information, the
-                # build needs to turn off optimizations
-                build_type = 'Debug'
-            cmake_args.append('-DCMAKE_BUILD_TYPE=%s' % build_type)
-            if WINDOWS:
-                cmake_args.extend([
-                    # we need to link with libpython on windows, so
-                    # passing python version to window in order to
-                    # find python in cmake
-                    '-DPY_VERSION={}'.format('{0}.{1}'.format(*sys.version_info[:2])),
-                ])
-                if USE_MSVC_STATIC_RUNTIME:
-                    cmake_args.append('-DONNX_USE_MSVC_STATIC_RUNTIME=ON')
-                if platform.architecture()[0] == '64bit':
-                    cmake_args.extend(['-A', 'x64', '-T', 'host=x64'])
-                else:
-                    cmake_args.extend(['-A', 'Win32', '-T', 'host=x86'])
-            if ONNX_ML:
-                cmake_args.append('-DONNX_ML=1')
-            if ONNX_VERIFY_PROTO3:
-                cmake_args.append('-DONNX_VERIFY_PROTO3=1')
-            if ONNX_BUILD_TESTS:
-                cmake_args.append('-DONNX_BUILD_TESTS=ON')
-            if ONNX_DISABLE_EXCEPTIONS:
-                cmake_args.append('-DONNX_DISABLE_EXCEPTIONS=ON')
-            if 'CMAKE_ARGS' in os.environ:
-                extra_cmake_args = shlex.split(os.environ['CMAKE_ARGS'])
-                # prevent crossfire with downstream scripts
-                del os.environ['CMAKE_ARGS']
-                log.info('Extra cmake args: {}'.format(extra_cmake_args))
-                cmake_args.extend(extra_cmake_args)
-            cmake_args.append(TOP_DIR)
-            log.info('Using cmake args: {}'.format(cmake_args))
-            if '-DONNX_DISABLE_EXCEPTIONS=ON' in cmake_args:
-                raise RuntimeError("-DONNX_DISABLE_EXCEPTIONS=ON option is only available for c++ builds. Python binding require exceptions to be enabled.")
-            subprocess.check_call(cmake_args)
-
-            build_args = [CMAKE, '--build', os.curdir]
-            if WINDOWS:
-                build_args.extend(['--config', build_type])
-                build_args.extend(['--', '/maxcpucount:{}'.format(self.jobs)])
-            else:
-                build_args.extend(['--', '-j', str(self.jobs)])
-            subprocess.check_call(build_args)
+# class cmake_build(setuptools.Command):
+#    """
+#    Compiles everything when `python setup.py build` is run using cmake.
+#
+#    Custom args can be passed to cmake by specifying the `CMAKE_ARGS`
+#    environment variable.
+#
+#    The number of CPUs used by `make` can be specified by passing `-j<ncpus>`
+#    to `setup.py build`.  By default all CPUs are used.
+#    """
+#    user_options = [
+#        (str('jobs='), str('j'), str('Specifies the number of jobs to use with make'))
+#    ]
+#
+#    built = False
+#
+#    def initialize_options(self):
+#        self.jobs = None
+#
+#    def finalize_options(self):
+#        self.set_undefined_options('build', ('parallel', 'jobs'))
+#        if self.jobs is None and os.getenv("MAX_JOBS") is not None:
+#            self.jobs = os.getenv("MAX_JOBS")
+#        self.jobs = multiprocessing.cpu_count() if self.jobs is None else int(self.jobs)
+#
+#    def run(self):
+#        if cmake_build.built:
+#            return
+#        cmake_build.built = True
+#        if not os.path.exists(CMAKE_BUILD_DIR):
+#            os.makedirs(CMAKE_BUILD_DIR)
+#
+#        with cd(CMAKE_BUILD_DIR):
+#            build_type = 'Release'
+#            # configure
+#            cmake_args = [
+#                CMAKE,
+#                '-DPYTHON_INCLUDE_DIR={}'.format(sysconfig.get_python_inc()),
+#                '-DPYTHON_EXECUTABLE={}'.format(sys.executable),
+#                '-DBUILD_ONNX_PYTHON=ON',
+#                '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',
+#                '-DONNX_NAMESPACE={}'.format(ONNX_NAMESPACE),
+#                '-DPY_EXT_SUFFIX={}'.format(sysconfig.get_config_var('EXT_SUFFIX') or ''),
+#            ]
+#            if COVERAGE:
+#                cmake_args.append('-DONNX_COVERAGE=ON')
+#            if COVERAGE or DEBUG:
+#                # in order to get accurate coverage information, the
+#                # build needs to turn off optimizations
+#                build_type = 'Debug'
+#            cmake_args.append('-DCMAKE_BUILD_TYPE=%s' % build_type)
+#            if WINDOWS:
+#                cmake_args.extend([
+#                    # we need to link with libpython on windows, so
+#                    # passing python version to window in order to
+#                    # find python in cmake
+#                    '-DPY_VERSION={}'.format('{0}.{1}'.format(*sys.version_info[:2])),
+#                ])
+#                if USE_MSVC_STATIC_RUNTIME:
+#                    cmake_args.append('-DONNX_USE_MSVC_STATIC_RUNTIME=ON')
+#                if platform.architecture()[0] == '64bit':
+#                    cmake_args.extend(['-A', 'x64', '-T', 'host=x64'])
+#                else:
+#                    cmake_args.extend(['-A', 'Win32', '-T', 'host=x86'])
+#            if ONNX_ML:
+#                cmake_args.append('-DONNX_ML=1')
+#            if ONNX_VERIFY_PROTO3:
+#                cmake_args.append('-DONNX_VERIFY_PROTO3=1')
+#            if ONNX_BUILD_TESTS:
+#                cmake_args.append('-DONNX_BUILD_TESTS=ON')
+#            if ONNX_DISABLE_EXCEPTIONS:
+#                cmake_args.append('-DONNX_DISABLE_EXCEPTIONS=ON')
+#            if 'CMAKE_ARGS' in os.environ:
+#                extra_cmake_args = shlex.split(os.environ['CMAKE_ARGS'])
+#                # prevent crossfire with downstream scripts
+#                del os.environ['CMAKE_ARGS']
+#                log.info('Extra cmake args: {}'.format(extra_cmake_args))
+#                cmake_args.extend(extra_cmake_args)
+#            cmake_args.append(TOP_DIR)
+#            log.info('Using cmake args: {}'.format(cmake_args))
+#            if '-DONNX_DISABLE_EXCEPTIONS=ON' in cmake_args:
+#                raise RuntimeError("-DONNX_DISABLE_EXCEPTIONS=ON option is only available for c++ builds. Python binding require exceptions to be enabled.")
+#            subprocess.check_call(cmake_args)
+#
+#            build_args = [CMAKE, '--build', os.curdir]
+#            if WINDOWS:
+#                build_args.extend(['--config', build_type])
+#                build_args.extend(['--', '/maxcpucount:{}'.format(self.jobs)])
+#            else:
+#                build_args.extend(['--', '-j', str(self.jobs)])
+#            subprocess.check_call(build_args)
 
 
 class build_py(setuptools.command.build_py.build_py):
     def run(self):
-        self.run_command('create_version')
-        self.run_command('cmake_build')
+#        self.run_command('create_version')
+#        self.run_command('cmake_build')
 
         generated_python_files = \
             glob.glob(os.path.join(CMAKE_BUILD_DIR, 'onnx', '*.py')) + \
@@ -242,7 +242,7 @@ class develop(setuptools.command.develop.develop):
 
 class build_ext(setuptools.command.build_ext.build_ext):
     def run(self):
-        self.run_command('cmake_build')
+#        self.run_command('cmake_build')
         setuptools.command.build_ext.build_ext.run(self)
 
     def build_extensions(self):
@@ -275,7 +275,6 @@ class mypy_type_check(ONNXCommand):
 
 cmdclass = {
     'create_version': create_version,
-    'cmake_build': cmake_build,
     'build_py': build_py,
     'develop': develop,
     'build_ext': build_ext,
-- 
2.35.1

